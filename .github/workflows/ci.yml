name: CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:

jobs:
  Build_Tests:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    services:
          sqlserver:
            image: mcr.microsoft.com/mssql/server:2019-latest
            env:
              SA_PASSWORD: "YourStrong!Passw0rd"
              ACCEPT_EULA: "Y"
            ports:
              - 1433:1433
            options: >-
              --health-cmd "opt/mssql-tools/bin/sqlcmd -S 172.18.0.2 -U SA -P 'YourStrong!Passw0rd' -Q 'SELECT 1' || exit 1"
              --health-interval 10s
              --health-start-period 30s
              --health-timeout 5s
              --health-retries 3
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 8.0.x
        
    - name: Restore dependencies
      run: dotnet restore PosTechFiap.sln

    - name: Build
      run: dotnet build PosTechFiap.sln --no-restore

    - name: Ensure Docker is running
      run: |
        sudo systemctl start docker
        sudo systemctl status docker

    - name: Update RunningCI in appsettings.Test.json
      run: |
        jq '.Settings.RunningCI = true' PosTechFiap.Test/appsettings.Test.json > PosTechFiap.Test/tmp.json
          mv PosTechFiap.Test/tmp.json PosTechFiap.Test/appsettings.Test.json
      
    - name: Update appsettings.Test.json
      run: |
        jq '.Settings.DbConnectionString = "Server=172.18.0.2,1433;Database=master;User Id=SA;Password=YourStrong!Passw0rd;Trusted_Connection=True;"' PosTechFiap.Test/appsettings.Test.json > PosTechFiap.Test/tmp.json
        mv PosTechFiap.Test/tmp.json PosTechFiap.Test/appsettings.Test.json

    - name: Print updated appsettings.Test.json
      run: cat PosTechFiap.Test/appsettings.Test.json
  
    - name: Run tests
      run: dotnet test PosTechFiap.sln --no-build --verbosity normal

    - name: List all Docker containers after tests
      run: docker ps -a

    - name: Get logs of all Docker containers
      run: |
        for container in $(docker ps -a -q); do
          echo "Logs for container $container:"
          docker logs $container
        done

